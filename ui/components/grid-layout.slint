import { SubFunction, Function, ComponentContext } from "../global.slint";

export component GridItem inherits Rectangle {
    in property <image> source;
    in property <string> name;
    in property <bool> active: true;

    preferred-width: 300px;
    preferred-height: 150px;
    height: (self.width / 2) + 10px;

    background: active ? #FFFFFF : ComponentContext.default-bg;
    border-color: active ? ComponentContext.spliter.bg : #FFFFFF;
    border-width: ComponentContext.spliter.pix;
    border-radius: 5px;

    VerticalLayout {
        alignment: center;
        Rectangle {
            Image {
                horizontal-alignment: center;
                height: root.height / 2;
                width: self.height;
                source: root.source;
                colorize: #324C79;
            }
        }

        Text {
            horizontal-alignment: center;
            text: root.name;
            color: ComponentContext.text-color;
//            font-weight: 500;
        }
    }

    if self.active: TouchArea {
        mouse-cursor: pointer;
        clicked => {

        }
    }
}

export component QGridLayout inherits VerticalLayout {
    in property <int> column: ComponentContext.group-column;
    in property <[SubFunction]> sub-functions;

    private property <length> padding-x: 50px;
    private property <length> padding-y: 20px;

    padding-left: self.padding-x;
    padding-right: self.padding-x;
    padding-top: self.padding-y;
    padding-bottom: self.padding-y;
    spacing: 20px;

    property <int> items:sub-functions.length;
    for i in Math.ceil(items / column): HorizontalLayout {
        spacing: 20px;

        property <int> remain: items - column * i;
        for j in (items - column * (i + 1) > 0 ? column: remain): GridItem {
            name: sub-functions[column * i + j].name;
            source: sub-functions[column * i + j].source;
        }

        for j in column - remain: GridItem {
            active: false;
        }
    }
}
