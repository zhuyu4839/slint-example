import { Context, Function, FunctionGroup, Interface } from "../globals/prelude.slint";

export component GridItem inherits Rectangle {
    in property <string> name;
    // x: the function index, y: the sub-function index
    in property <image> icon;
    in property <{x: int, y: int}> point;
    in property <bool> active: true;

    preferred-width: 300px; // preferred-width必须指定一个合适的值 否则影响空GridItem的宽度
    height: self.width * 0.6;

    background: active ? Interface.none-bg : Interface.default-bg;
    border-color: active ? Interface.split-bg : Interface.none-bg;
    border-width: Interface.split-size;
    border-radius: 5px;

    VerticalLayout {
        alignment: center;
        Rectangle {
            Image {
                horizontal-alignment: center;
                height: root.height / 2;
                width: self.height;
                source: root.icon;
                colorize: #324C79;
            }
        }

        Text {
            horizontal-alignment: center;
            text: root.name;
            color: Interface.text-color;
//            font-weight: 500;
        }
    }

    if self.active: TouchArea {
        mouse-cursor: pointer;
        clicked => {
            Context.button-clicked(point.x, point.y);
        }
    }
}

export component GridLayout inherits VerticalLayout {
    in property <int> column: Context.group-column;
    in property <[Function]> functions;
    in property <int> index;

    private property <length> padding-x: 50px;
    private property <length> padding-y: 20px;

    padding-left: self.padding-x;
    padding-right: self.padding-x;
    padding-top: self.padding-y;
    padding-bottom: self.padding-y;
    spacing: 20px;

    property <int> items: functions.length;
    for i in ceil(items / column): HorizontalLayout {
        spacing: 20px;

        property <int> remain: items - column * i;
        for j in (items - column * (i + 1) > 0 ? column: remain): GridItem {
            property <int> index: column * i + j;
            name: functions[index].name;
            icon: functions[index].icon;
            point: {x: root.index, y: index};
        }

        for j in column - remain: GridItem {
            active: false;
        }
    }
}
